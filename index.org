#+title: CAS CS 491
#+subtitle: Type Theory and Mechanized Reasoning@@html:<br>@@
#+subtitle: Boston University@@html:<br>@@
#+subtitle: Spring 2024
#+options: H:2
This course is an introduction to basic concepts in type theory and
mechanized proof as they relate to programming languages, formal
verification, mathematics, and philosophy. We will only be able to
cover a (biased) selection of rudiments, but the goal is to provide
students (you) with the tools to:
+ construct formal proofs and typing derivations for a variety of
  logics and type theories which undergird systems used for large-scale
  verification tasks;
+ prove meta-theoretic properties of type theories (like normalization
  and soundness) which are core to their utility;
+ implement fundamental algorithms for type theories like
  type-checking and type-inference;
+ formalize non-trivial mathematical theorems and properties of
  programs using Agda;
+ prepare for graduate-level courses in formal methods and programming
  languages;
+ think critically about the fundamental question: /what is a proof?/
  Does a proof need to be human readable? Does it need to be human
  /understandable/? Does it need to be constructive? (What /is/ constructivity?)

*Prerequesites:* CS131, CS330, CS320 (CS332 is recommended but not required)

* Links
+ [[file:Notes/syllabus.pdf][Syllabus]]
+ [[https://piazza.com/class/lr6hvcdfwl1il][Piazza]]
+ [[https://www.gradescope.com/courses/700611][Gradescope]]
+ [[https://github.com/nmmull/CS491-S24][Course Repository]]
+ [[*Schedule][Schedule]]
+ [[*Topics][Topics]]
+ Resources:
  + [[https://wiki.portal.chalmers.se/agda/pmwiki.php][The Agda Wiki]]
  + [[https://avigad.github.io/lamr/#][Logic and Mechanized Reasoning (LAMR)]]
  + [[https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/][Type Theory and Functional Programming (TTFF)]]
+ [[*Log][Log]]
* Schedule
|-------+-----------------------------+---------------------|
|  Date | Topic                       | Notes               |
|-------+-----------------------------+---------------------|
| 01-22 | [[#course-intro]]               |                     |
| 01-24 | [[#ind-rec]]                    | HW00 out            |
|-------+-----------------------------+---------------------|
| 01-29 | [[#lean-i]]                     |                     |
| 02-01 | [[#lean-ii]]                    | HW01 out            |
|-------+-----------------------------+---------------------|
| 02-05 | [[#prop-logic]]                 |                     |
| 02-07 | [[#prop-logic-ii]]              | HW01 due, HW02 out  |
|-------+-----------------------------+---------------------|
| 02-12 | [[#sat]]                        |                     |
| 02-14 | [[#theories]]                   | HW02 due, HW03 out  |
|-------+-----------------------------+---------------------|
| 02-21 | [[#smt]]                        | HW03 due, HW04 out  |
| 02-19 | [[#int-prop-logic-i]]           |                     |
|-------+-----------------------------+---------------------|
| 02-26 | [[#lambda-i]]                   |                     |
| 02-28 | [[#lambda-ii]]                  | HW04 due, HW05 out  |
|-------+-----------------------------+---------------------|
| 03-04 | [[#simple-types-i]]             |                     |
| 03-06 | [[#simple-types-ii]]            | HW05 due            |
|-------+-----------------------------+---------------------|
|       | SPRING RECESS               |                     |
|-------+-----------------------------+---------------------|
| 03-18 | [[#lean-iii]]                   |                     |
| 03-20 | [[#lean-iv]]                    | HW06 out            |
|-------+-----------------------------+---------------------|
| 03-25 | [[#poly]]                       |                     |
| 03-27 | [[#type-inf]]                   | HW06 due, HW07 out  |
|-------+-----------------------------+---------------------|
| 04-01 | [[#hol]]                        |                     |
| 04-03 | [[#dtt]]                        | HW07 due, HW08 out  |
|-------+-----------------------------+---------------------|
| 04-08 | [[#lambda-cube]]                |                     |
| 04-10 | [[#curry-howard]]               | HW08 due, HW09 out  |
|-------+-----------------------------+---------------------|
| 04-15 | NO CLASS                    | Patriots’ Day       |
| 04-17 | [[#real-world]]                 | HW09 due            |
|-------+-----------------------------+---------------------|
| 04-22 | NO CLASS                    | Ex. Credit Opp. TBA |
| 04-24 | [[#extensions]]                 |                     |
|-------+-----------------------------+---------------------|
| 04-29 | [[#paradox]]                    |                     |
| 05-01 | Final Project Presentations |                     |
|-------+-----------------------------+---------------------|
* Topics
** What is this course?
:PROPERTIES:
:CUSTOM_ID: course-intro
:END:
*** Summary:
+ give a rough outline of the topics of the course
+ discuss the role of mechanized reasoning in computer science and
  mathematics
+ look breifly at the Curry-Howard isomorphism
*** Reading:
**** [[https://www.quantamagazine.org/the-deep-link-equating-math-proofs-and-computer-programs-20231011/][The Deep Link Equating Math Proofs and Computer Programs (Quanta)]]
**** [[https://www.nature.com/articles/d41586-021-01627-2][Mathematicians welcome computer-assisted proof in ‘grand unification’ theory (Nature)]]
** Induction and Recursion
:PROPERTIES:
:CUSTOM_ID: ind-rec
:END:
*** Summary:
+ review induction over natural numbers and extend this to induction
  over inductively-defined sets
+ think about what "kind of thing" induction is, and how that will
  affect our ability to formalize it
+ discuss the connection between induction and recursion, with any eye
  towards how these will relate in Lean
*** Reading:
**** [[https://avigad.github.io/lamr/mathematical_background.html][LAMR 2: Mathematical Background]]
**** Advance:
***** [[https://yforster.github.io/files/talk-chocola-synthetic-computability.pdf][Synthetic Computability (Yannick Forster)]]
***** [[https://mathweb.ucsd.edu/~sbuss/ResearchWeb/BAthesis/Buss_Thesis_OCR.pdf][Bounded Arithmetic (Sam Buss)]]
***** [[https://en.wikipedia.org/wiki/Transfinite_induction][Transfinite Induction (Wikipedia)]]
** Agda I: An Introduction
:PROPERTIES:
:CUSTOM_ID: lean-i
:END:
+ Summary:
  + examine at Agda as a function programming language, especially as
    compared to OCaml (the language of CAS CS 320)
  + start looking at dependent types and what we can do with them
+ Reading:
  + [[https://github.com/jespercockx/agda-lecture-notes/blob/master/agda.pdf][Programming and Proving in Agda (PPA) 1: An introduction to Agda]]
** Agda II: Dependent Types
:PROPERTIES:
:CUSTOM_ID: lean-ii
:END:
*** Summary:
+ play with dependent types, with the goal of seeing some of their
  strangeness, not necessarily understanding how they work
+ start to think about how dependent types can be used to represent
  "properties" and how that might be useful for mechanized reasoning
*** Reading:
+ PPA 2: Dependent Types
** Propositional Logic I: An Introduction
:PROPERTIES:
:CUSTOM_ID: prop-logic
:END:
*** Summary:
+ discuss in more detail the standard workflow of Agda
+ introduce the syntax and semantics of propositional logic (as well
  as what exactly these terms mean)
+ see how we can use agda as a framework for implementing
  propositional logic
*** Reading:
**** [[https://nmmull.gitbook.io/cmsc-10500/notes/logic][A Primer on Propositional Logic]]
**** [[http://intrologic.stanford.edu/chapters/chapter_02.html][Propositional Logic]]
**** [[https://avigad.github.io/lamr/propositional_logic.html#][LAMR 4: Propositional Logic]]
** Propositional Logic II: Meta-Theory
:PROPERTIES:
:CUSTOM_ID: prop-logic-ii
:END:
** Propositional Logic III: Resolution and SAT
:PROPERTIES:
:CUSTOM_ID: sat
:END:
** Predicate Logic I: Theories and Models
:PROPERTIES:
:CUSTOM_ID: theories
:END:
** Predicate Logic II: SAT Modulo Theories (SMT)
:PROPERTIES:
:CUSTOM_ID: smt
:END:
** Intuitionistic Propositional Logic
:PROPERTIES:
:CUSTOM_ID: int-prop-logic-i
:END:
** The lambda calculus I
:PROPERTIES:
:CUSTOM_ID: lambda-i
:END:
** The lambda calculus II
:PROPERTIES:
:CUSTOM_ID: lambda-ii
:END:
** Simple types I
:PROPERTIES:
:CUSTOM_ID: simple-types-i
:END:
** Simple types II
:PROPERTIES:
:CUSTOM_ID: simple-types-ii
:END:
** Agda III
:PROPERTIES:
:CUSTOM_ID: lean-iii
:END:
** Agda IV
:PROPERTIES:
:CUSTOM_ID: lean-iv
:END:
** Polymorphism
:PROPERTIES:
:CUSTOM_ID: poly
:END:
** Type inference
:PROPERTIES:
:CUSTOM_ID: type-inf
:END:
** Quantifiers and higher-order logic
:PROPERTIES:
:CUSTOM_ID: hol
:END:
** Dependent type theory
:PROPERTIES:
:CUSTOM_ID: dtt
:END:
** The Curry-Howard isomorphism
:PROPERTIES:
:CUSTOM_ID: curry-howard
:END:
** The lambda cube
:PROPERTIES:
:CUSTOM_ID: lambda-cube
:END:
** Advanced: Real world mechanized proving
:PROPERTIES:
:CUSTOM_ID: real-world
:END:
** Advanced: Extensions of type theory
:PROPERTIES:
:CUSTOM_ID: extensions
:END:
** Advanced: Type-theoretic paradoxes
:PROPERTIES:
:CUSTOM_ID: paradox
:END:
* Log
