#+title: CAS CS 491
#+subtitle: Type Theory and Mechanized Reasoning@@html:<br>@@
#+subtitle: Boston University@@html:<br>@@
#+subtitle: Spring 2024
#+options: H:2
This course is an introduction to basic concepts in type theory and
mechanized proof as they relate to programming languages, formal
verification, mathematics, and philosophy. We will only be able to
cover a (biased) selection of rudiments, but the goal is to provide
students (you) with the tools to:
+ construct formal proofs and typing derivations for a variety of
  logics and type theories which undergird systems used for large-scale
  verification tasks;
+ prove meta-theoretic properties of type theories (like normalization
  and soundness) which are core to their utility;
+ implement fundamental algorithms for type theories like
  type-checking and type-inference;
+ formalize non-trivial mathematical theorems and properties of
  programs using the Lean theorem prover;
+ prepare for graduate-level courses in formal methods and programming
  languages;
+ think critically about the fundamental question: /what is a proof?/
  Does a proof need to be human readable? Does it need to be human
  /understandable/? Does it need to be constructive? (What /is/ constructivity?)

*Prerequesites:* CS131, CS330, CS320 (CS332 is recommended but not required)

* Links
+ [[https://piazza.com/class/lr6hvcdfwl1il][Piazza]]
+ [[https://www.gradescope.com/courses/700611][Gradescope]]
+ [[https://github.com/nmmull/CS491-S24][Material]]
+ [[*Schedule]]
+ [[https://leanprover.github.io][Lean]]
+ Syllabus
+ [[*Log]]
* Schedule
|-------+-----------------------------+---------------------|
|  Date | Topic                       | Notes               |
|-------+-----------------------------+---------------------|
| 01-22 | [[#course-intro]]               |                     |
| 01-24 | [[#ind-rec]]                    | HW01 out            |
|-------+-----------------------------+---------------------|
| 01-29 | [[#lean-i]]                     |                     |
| 02-01 | [[#lean-ii]]                    | HW01 due, HW02 out  |
|-------+-----------------------------+---------------------|
| 02-05 | [[#prop-logic]]                 |                     |
| 02-07 | [[#sat]]                        | HW02 due, HW03 out  |
|-------+-----------------------------+---------------------|
| 02-12 | [[#theories]]                   |                     |
| 02-14 | [[#smt]]                        | HW03 due, HW04 out  |
|-------+-----------------------------+---------------------|
| 02-19 | [[#int-prop-logic-i]]           |                     |
| 02-21 | [[#int-prop-logic-ii]]          | HW04 due, HW05 out  |
|-------+-----------------------------+---------------------|
| 02-26 | [[#lambda-i]]                   |                     |
| 02-28 | [[#lambda-ii]]                  | HW05 due, HW06 out  |
|-------+-----------------------------+---------------------|
| 03-04 | [[#simple-types-i]]             |                     |
| 03-06 | [[#simple-types-ii]]            | HW06 due            |
|-------+-----------------------------+---------------------|
|       | SPRING RECESS               |                     |
|-------+-----------------------------+---------------------|
| 03-18 | [[#lean-iii]]                   |                     |
| 03-20 | [[#lean-iv]]                    | HW07 out            |
|-------+-----------------------------+---------------------|
| 03-25 | [[#poly]]                       |                     |
| 03-27 | [[#type-inf]]                   | HW07 due, HW08 out  |
|-------+-----------------------------+---------------------|
| 04-01 | [[#hol]]                        |                     |
| 04-03 | [[#dtt]]                        | HW08 due, HW09 out  |
|-------+-----------------------------+---------------------|
| 04-08 | [[#lambda-cube]]                |                     |
| 04-10 | [[#curry-howard]]               | HW09 due, HW10 out  |
|-------+-----------------------------+---------------------|
| 04-15 | NO CLASS                    | Patriotsâ€™ Day       |
| 04-17 | [[#real-world]]                 | HW10 due            |
|-------+-----------------------------+---------------------|
| 04-22 | NO CLASS                    | Ex. Credit Opp. TBA |
| 04-24 | [[#extensions]]                 |                     |
|-------+-----------------------------+---------------------|
| 04-29 | [[#paradox]]                    |                     |
| 05-01 | Final Project Presentations |                     |
|-------+-----------------------------+---------------------|
** What is this course?
:PROPERTIES:
:CUSTOM_ID: course-intro
:END:
** Induction and recursion
:PROPERTIES:
:CUSTOM_ID: ind-rec
:END:
** Lean I
:PROPERTIES:
:CUSTOM_ID: lean-i
:END:
** Lean II
:PROPERTIES:
:CUSTOM_ID: lean-ii
:END:
** Propositional logic
:PROPERTIES:
:CUSTOM_ID: prop-logic
:END:
** Satisfiability and resolution (SAT)
:PROPERTIES:
:CUSTOM_ID: sat
:END:
** Theories and models
:PROPERTIES:
:CUSTOM_ID: theories
:END:
** Satisfiability modulo theories (SMT)
:PROPERTIES:
:CUSTOM_ID: smt
:END:
** Intuitionistic propositional logic I
:PROPERTIES:
:CUSTOM_ID: int-prop-logic-i
:END:
** Intuitionistic propositional logic II
:PROPERTIES:
:CUSTOM_ID: int-prop-logic-ii
:END:
** The lambda calculus I
:PROPERTIES:
:CUSTOM_ID: lambda-i
:END:
** The lambda calculus II
:PROPERTIES:
:CUSTOM_ID: lambda-ii
:END:
** Simple types I
:PROPERTIES:
:CUSTOM_ID: simple-types-i
:END:
** Simple types II
:PROPERTIES:
:CUSTOM_ID: simple-types-ii
:END:
** Lean III
:PROPERTIES:
:CUSTOM_ID: lean-iii
:END:
** Lean IV
:PROPERTIES:
:CUSTOM_ID: lean-iv
:END:
** Polymorphism
:PROPERTIES:
:CUSTOM_ID: poly
:END:
** Type inference
:PROPERTIES:
:CUSTOM_ID: type-inf
:END:
** Quantifiers and higher-order logic
:PROPERTIES:
:CUSTOM_ID: hol
:END:
** Dependent type theory
:PROPERTIES:
:CUSTOM_ID: dtt
:END:
** The Curry-Howard isomorphism
:PROPERTIES:
:CUSTOM_ID: curry-howard
:END:
** The lambda cube
:PROPERTIES:
:CUSTOM_ID: lambda-cube
:END:
** Advanced: Real world mechanized proving
:PROPERTIES:
:CUSTOM_ID: real-world
:END:
** Advanced: Extensions of type theory
:PROPERTIES:
:CUSTOM_ID: extensions
:END:
** Advanced: Set-theoretic and type-theoretic paradoxes
:PROPERTIES:
:CUSTOM_ID: paradox
:END:
* Log
